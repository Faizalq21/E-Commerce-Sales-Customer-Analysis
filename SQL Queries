create database ecommerce;
use ecommerce;

create schema schema_ecommerce;

##1.List All Unique Cities Where Customers Are Located
SELECT DISTINCT customer_city FROM customers;

##2.Count the Number of Orders Placed in 2017
SELECT COUNT(order_id) FROM orders WHERE YEAR(order_purchase_timestamp) = 2017;

##3.Find the Total Sales per Category
SELECT UPPER(products.product_category) AS category, 
       ROUND(SUM(payments.payment_value), 2) AS sales
FROM products
JOIN order_items ON products.product_id = order_items.product_id
JOIN payments ON payments.order_id = order_items.order_id
GROUP BY category;

##4.Calculate the Percentage of Orders Paid in Installments
SELECT ((SUM(CASE WHEN payment_installments >= 1 THEN 1 ELSE 0 END) / COUNT(*)) * 100) AS percentage_paid_in_installments
FROM payments;

##5.Count the Number of Customers from Each State
SELECT customer_state, COUNT(customer_id) AS customer_count
FROM customers
GROUP BY customer_state
ORDER BY customer_count DESC;

##6.Calculate the Number of Orders per Month in 2018
SELECT MONTHNAME(order_purchase_timestamp) AS months, COUNT(order_id) AS order_count
FROM orders
WHERE YEAR(order_purchase_timestamp) = 2018
GROUP BY months
ORDER BY MONTH(order_purchase_timestamp);

##7.Find the Average Number of Products per Order, Grouped by Customer City
WITH count_per_order AS (
    SELECT orders.order_id, orders.customer_id, COUNT(order_items.order_id) AS oc
    FROM orders
    JOIN order_items ON orders.order_id = order_items.order_id
    GROUP BY orders.order_id, orders.customer_id
)
SELECT customers.customer_city, ROUND(AVG(count_per_order.oc), 2) AS average_orders
FROM customers
JOIN count_per_order ON customers.customer_id = count_per_order.customer_id
GROUP BY customers.customer_city
ORDER BY average_orders DESC;

##8.Calculate the Percentage of Total Revenue Contributed by Each Product Category
SELECT UPPER(products.product_category) AS category, 
       ROUND((SUM(payments.payment_value) / (SELECT SUM(payment_value) FROM payments)) * 100, 2) AS sales_percentage
FROM products
JOIN order_items ON products.product_id = order_items.product_id
JOIN payments ON payments.order_id = order_items.order_id
GROUP BY category
ORDER BY sales_percentage DESC;

##9.Identify the Correlation Between Product Price and the Number of Times a Product Has Been Purchased
SELECT products.product_category, 
       COUNT(order_items.product_id) AS order_count,
       ROUND(AVG(order_items.price), 2) AS avg_price
FROM products
JOIN order_items ON products.product_id = order_items.product_id
GROUP BY products.product_category;

##10.Calculate the Total Revenue Generated by Each Seller, and Rank Them by Revenue
SELECT seller_id, revenue, DENSE_RANK() OVER (ORDER BY revenue DESC) AS rank
FROM (
    SELECT order_items.seller_id, SUM(payments.payment_value) AS revenue
    FROM order_items
    JOIN payments ON order_items.order_id = payments.order_id
    GROUP BY order_items.seller_id
) AS subquery;

##11.Calculate the Moving Average of Order Values for Each Customer Over Their Order History
SELECT customer_id, order_purchase_timestamp, payment,
       AVG(payment) OVER (PARTITION BY customer_id ORDER BY order_purchase_timestamp
                          ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) AS mov_avg
FROM (
    SELECT orders.customer_id, orders.order_purchase_timestamp, payments.payment_value AS payment
    FROM payments
    JOIN orders ON payments.order_id = orders.order_id
) AS subquery;

##12.Calculate the Cumulative Sales per Month for Each Year
SELECT years, months, payment, 
       SUM(payment) OVER (ORDER BY years, months) AS cumulative_sales
FROM (
    SELECT YEAR(orders.order_purchase_timestamp) AS years,
           MONTH(orders.order_purchase_timestamp) AS months,
           ROUND(SUM(payments.payment_value), 2) AS payment
    FROM orders
    JOIN payments ON orders.order_id = payments.order_id
    GROUP BY years, months
    ORDER BY years, months
) AS subquery;

##13.Calculate the Year-over-Year Growth Rate of Total Sales
WITH annual_sales AS (
    SELECT YEAR(orders.order_purchase_timestamp) AS years,
           ROUND(SUM(payments.payment_value), 2) AS payment
    FROM orders
    JOIN payments ON orders.order_id = payments.order_id
    GROUP BY years
    ORDER BY years
)
SELECT years, 
       ((payment - LAG(payment, 1) OVER (ORDER BY years)) /
        LAG(payment, 1) OVER (ORDER BY years)) * 100 AS yoy_growth
FROM annual_sales;

##14.Calculate the Retention Rate of Customers
WITH first_order AS (
    SELECT customers.customer_id,
           MIN(orders.order_purchase_timestamp) AS first_order
    FROM customers
    JOIN orders ON customers.customer_id = orders.customer_id
    GROUP BY customers.customer_id
),
next_order AS (
    SELECT first_order.customer_id, 
           COUNT(DISTINCT orders.order_purchase_timestamp) AS next_order_count
    FROM first_order
    JOIN orders ON orders.customer_id = first_order.customer_id
    AND orders.order_purchase_timestamp > first_order
    AND orders.order_purchase_timestamp < DATE_ADD(first_order, INTERVAL 6 MONTH)
    GROUP BY first_order.customer_id
)
SELECT 100 * (COUNT(DISTINCT first_order.customer_id) / COUNT(DISTINCT next_order.customer_id)) AS retention_rate
FROM first_order
LEFT JOIN next_order ON first_order.customer_id = next_order.customer_id;
